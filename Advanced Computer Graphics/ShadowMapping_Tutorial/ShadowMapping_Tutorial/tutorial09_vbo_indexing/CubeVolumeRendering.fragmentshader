#version 330 core

// Interpolated values from the vertex shaders
//in vec3 UV;
in vec3 Position_modelspace;
in vec3 EyeDirection_modelspace;


// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler3D volumeSampler;

highp float rand(vec2 co)
{
    highp float a = 12.9898;
    highp float b = 78.233;
    highp float c = 43758.5453;
    highp float dt= dot(co.xy ,vec2(a,b));
    highp float sn= mod(dt,3.14);
    return fract(sin(sn) * c);
}

void main(){
	
	// normalize eyedir
	vec3 eyedir_norm = normalize(EyeDirection_modelspace);
	
	// set the start uvs to the position in modelspace of the cube
	vec3 uvs = Position_modelspace;
	// set the uv step size. A good size is a little bit smaller than one texel to prevent undersampling
	vec3 uvStep = normalize(eyedir_norm) /96.0;
	// three possibilities where the first wall of the cube is hit
	
	// first, calculate the sign of each component of the eyedirection
	vec3 signsEye = sign(eyedir_norm);
	// when the eyedir is negative, set 0, when it is positive, 1
	vec3 signsEyeClamped = max(signsEye, 0);
	// and the inverse
	vec3 signsEyeClampedInv = vec3(1.0) - signsEyeClamped;
	// the inverted position in modelspace
	vec3 posinverted = vec3(1.0) - Position_modelspace;
	
	// where the sign of the eye direction is negative, keep the original position,
	// because we just calculate the amount of uvSteps from position to 0.
	// where the sign of the eye direction is positive, keep the inverted positions
	// because we have to calculate the number of uvSteps from position to 1
	vec3 positions = posinverted * signsEyeClamped + Position_modelspace * signsEyeClampedInv;
	// now we can just divide by uvstep to know how many steps fit into the space until the ray 
	// hits the edge of the cube in each dimension
	vec3 correctedPositions = positions / abs(uvStep);
	// we only need the minimum dimension, because then we left the cube
	float steps = min(min(correctedPositions.x, correctedPositions.y), correctedPositions.z);
	
	// BONUS: calculate a random number between -0.5 and 0.5
	float randstart = rand(uvs.xy*uvs.zz*10000.0) - 0.5;
	// BONUS: add this random number to the start uv coordinates to have a slightly different starting
	// point for every ray to trade aliasing for noise
	//uvs += uvStep*randstart;
	
	// a vec4 to store the running color in
	vec4 runningCol = vec4(0);
	// for loop over a fixed amount of steps (at least as much as uvstep fits into the
	// diagonal of the volume texture)
	for (float i = 0; i < 128.0; i+=1.0)
	{	
		// sample the volume texture at the texture coordinates
		vec4 tempCol = texture(volumeSampler, uvs);
		// mix the color of the new sample with the running color, depending on alpha
		runningCol.rgb = mix(runningCol.rgb, tempCol.rgb, tempCol.a);
		// set alpha to the maximum alpha in the whole ray
		runningCol.a = max(tempCol.a, runningCol.a);
		// advance the uvs by uvStep
		uvs += uvStep;
		// if we are out of the cube, break
		if (i > steps)
			break;
	}
	
	// set the output color to the running color
	color.rgba = runningCol.rgba;

}
