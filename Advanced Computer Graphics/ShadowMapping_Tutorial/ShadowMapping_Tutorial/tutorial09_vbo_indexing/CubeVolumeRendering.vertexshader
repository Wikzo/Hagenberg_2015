#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal_modelspace;

// Output data ; will be interpolated for each fragment.
//out vec2 UV;
//out vec3 Position_worldspace;
//out vec3 Normal_cameraspace;
//out vec3 EyeDirection_cameraspace;
//out vec3 LightDirection_cameraspace;
out vec3 EyeDirection_modelspace;
out vec3 Position_modelspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec3 LightPosition_worldspace;

void main(){

	// calculate Modelview Matrix by multiplying model with view Matrix
	mat4 modelview = M*V;
	// transposing modelview matrix
	mat4 modelviewTp = transpose(modelview);
	
	// get the position in model space
	Position_modelspace = vertexPosition_modelspace;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	
	// Vector that goes from the vertex to the camera, in camera space.
	// In camera space, the camera is at the origin (0,0,0).
	vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
	vec3 EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
	// eyedirection in modelspace is the eyedirection in cameraspace multiplied with the inverse transposed
	// modelview matrix
	EyeDirection_modelspace = (modelviewTp * vec4(EyeDirection_cameraspace, 0)).xyz;
}

