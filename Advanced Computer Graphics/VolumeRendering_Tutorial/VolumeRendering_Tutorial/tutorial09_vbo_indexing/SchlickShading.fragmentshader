#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;

in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 Normal_worldspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

// Ouput data
layout (location = 0) out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
uniform sampler2D receiverTex;
uniform sampler2D emitterTex;
uniform sampler2D textureSampler4;
uniform sampler2D textureSampler5;
uniform mat4 MV;
uniform vec3 LightPosition_worldspace;
uniform vec3 MaterialSpecularColor;
uniform float metalness;
uniform float shininess;
uniform float specularity;
uniform int isShadowCaster;
uniform float shadowMagicNumber;

float SchlickFresnelFactor(vec3 halfwayDirection, vec3 viewDirection)
{

    float w = pow(1.0 - max(0.0,
        dot(halfwayDirection, viewDirection)), 5.0);
		return w;
}


void main(){

	// Light emission properties
	// You probably want to put them as uniforms
	vec3 LightColor = vec3(1,1,1);
	float LightPower = 50.0f;

	vec2 uvs = UV.xy;
	uvs.y = -uvs.y;
	// Material properties
	vec4 col0 = texture( myTextureSampler, uvs.xy );

	vec3 MaterialDiffuseColor = col0;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 specColor = mix(MaterialSpecularColor, MaterialDiffuseColor, metalness);
	specColor = specularity * specColor;

	// Distance to the light
	float distance = length( LightPosition_worldspace - Position_worldspace );
	LightPower /= distance*distance;

    vec3 l = normalize( LightDirection_cameraspace );
	vec3 n = normalize( Normal_cameraspace);
	
	float ndotL = dot( n,l );
    ndotL = min(1.0, ndotL);
	vec3 diffuseLight = vec3(clamp( ndotL, 0,1 ));

	// Eye vector (towards the camera)
	vec3 E = normalize(EyeDirection_cameraspace);


	vec3 halfwayDirection = normalize(l + E);
	float w = SchlickFresnelFactor(halfwayDirection, E) * max(0,diffuseLight.x);
	vec3 specularLight = vec3(0);

	diffuseLight = LightPower*  MaterialDiffuseColor * vec3(1.0-w);
	specularLight = LightPower * vec3(LightColor) * vec3(specColor)
	//* mix(vec3(specColor), vec3(1.0), w)
	* pow(max(0.0, dot(halfwayDirection, n)), shininess);


float lightingMul = pow(max(ndotL, 0.0), 0.5);

color.xyz =
MaterialAmbientColor+
(diffuseLight+
specularLight) * lightingMul;
	color.a = 1.0f;//texture( myTextureSampler, UV ).a;


}
