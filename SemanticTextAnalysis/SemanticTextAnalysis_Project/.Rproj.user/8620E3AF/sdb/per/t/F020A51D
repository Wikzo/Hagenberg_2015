{
    "contents" : "# remove all variables\nrm(list=ls(all=TRUE))\n\n# load in the files\nnews1 = scan(\"news1.txt\", what=\"character\")\nnews2 = scan(\"news2.txt\", what=\"character\")\nnews3 = scan(\"news3.txt\", what=\"character\")\nnews4 = scan(\"news4.txt\", what=\"character\")\nnews5 = scan(\"news5.txt\", what=\"character\")\n\n# put all articles in a list\nnewsArticles = list(news1, news2, news3, news4, news5); # list of all articles\n\n#list of all words\nallWords = union(news1, news2);\nallWords = union(allWords, news3);\nallWords = union(allWords, news4);\nallWords = union(allWords, news5);\n\n# make index list with 727 entries and 1 column set to NULL\nindexList = list(rep(list(c()), times=length(allWords)));\n\n# make counter list where all data is set to default zero\ncountList =list(rep(list(c(0)), times=length(allWords)));\ncounter = 0;\n\n# look through all words and set document ID\nfor (i in 1:length(allWords)) # loop through all words\n{\n  for (j in 1:length(newsArticles)) # loop through all articles\n  {\n    if (is.element(allWords[[i]], newsArticles[[j]])) # check if word matches article\n    {\n      indexList[[1]][[i]] = union(indexList[[1]][[i]],j); # set document ID to list\n      counter = countList[[1]][[i]];\n      counter = counter + 1;\n      countList[[1]][[i]] = counter;\n    }\n\n  }\n}\n# set the second element to all the words\nindexList[[2]] =  allWords;\nindexList[[3]] = countList[[1]];\n\n# NOTE: list is too long to be shown in Environment list\nindexList[[1]] # see all document IDs\nindexList[[2]] # see all words\n\n# simple tests ----------------\n# find the dictionary entry that contains word \"of\"\nposition = match(\"of\", indexList[[2]]) # position of word in total words\nposition\n\n# retrive the document IDs in that position: document 1+2+3+4+5\nindexList[[c(1,position)]]\n\n# searches for word number 371: \"respectively\nindexList[[c(2,371)]]\n\n# how many times does the word \"respectively\" occur? 1 time\nindexList[[c(3,371)]]\n\n# what document(s) includes the word \"respectively\"? document 2\nindexList[[c(1,371)]]\n\n# simple test ---------------- end\n\n# SORTING THE LISTS ACCORDING TO THE FREQUENCY COUNT -------------\n\n# rename the columns\nnames(indexList)[1] = \"ID\";\nnames(indexList)[2] = \"Word\";\nnames(indexList)[3] = \"Freq\";\n\n# sort by freq, then id, then word\n# inspired by: http://www.ats.ucla.edu/stat/r/faq/sort.htm\n# this does not work?\nindex_sorted = indexList[order(indexList[3], indexList[1], indexList[2])]\n\nlength(index_sorted)\n# result: 1\n\nlength(indexList)\n# result: 3\n\n# SORTING THE LISTS ACCORDING TO THE FREQUENCY COUNT  ------------- end\n\n# query optimization ----------\n\n# TODO:\n# we want to look for the words \"of\" AND \"Friday\"\n# let's look throught the lists with fewer elements first\n\n\n# query optimization (AND) ---------- end",
    "created" : 1444308965906.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "926780811",
    "id" : "F020A51D",
    "lastKnownWriteTime" : 1445343044,
    "path" : "~/Hagenberg_2015/SemanticTextAnalysis/SemanticTextAnalysis_Project/invertedIndex.R",
    "project_path" : "invertedIndex.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}