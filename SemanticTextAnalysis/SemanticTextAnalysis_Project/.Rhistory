# query optimization (AND) ---------- end
indexList
sort(indexList)
sort(indexList[[1]])
sort(indexList[[1]])
x <- swiss$Education[1:25]
x
length(x)
typeof(x)
sort(x)
indexList[order(indexList[[3]],indexList[[1]],indexList[[2]],decreasing=FALSE),]
a <- list(name = "Ann", age = 9)
indexList[order(indexList[[3]],indexList[[1]],decreasing=FALSE),]
indexList[[c(2,371)]]
indexList[[c(2,)]]
indexList[[1]][,1]]
indexList[[1]][,1]
indexList[[1]][1,]
indexList[[1]]
x <- c(5.0, 3.0, 2.0, 2.2, 0.0, 5.0, 3.0, 2.0, 2.2)
x;
x[sort.list(x)]
df = data.frame(id=indexList[[1]], word=indexList[[2]], freq=indexList[[3]]);
length(indexList[[1]])
length(indexList[[2]])
length(indexList[[3]])
df = data.frame(id=indexList[[1]], word=indexList[[2]], freq=indexList[[3]]);
df <- data.frame(matrix(unlist(indexList[[1]]), nrow=132, byrow=T),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(indexList), nrow=132, byrow=T),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(indexList))
df
df <- data.frame(matrix(unlist(indexList)
df
df;
df <- data.frame(matrix(unlist(indexList), nrow=length(indexList[[1]]), byrow=T),stringsAsFactors=FALSE)
length(indexList[[1]]
length(indexList[[1]])
length(indexList[[1]])
df <- data.frame(matrix(unlist(indexList), nrow=length(indexList[[1]]), byrow=F),stringsAsFactors=FALSE)
df <- data.frame(matrix(unlist(indexList), nrow=371, byrow=T))
df <- data.frame(matrix(unlist(indexList[[1]]), nrow=371, byrow=T))
df <- data.frame(matrix(unlist(indexList[[1]]), nrow=3, byrow=T))
#indexList[order(indexList[[3]],indexList[[1]],decreasing=FALSE),]
news1 = scan("news1.txt", what="character")
news2 = scan("news2.txt", what="character")
news3 = scan("news3.txt", what="character")
news4 = scan("news4.txt", what="character")
news5 = scan("news5.txt", what="character")
newsArticles = list(news1, news2, news3, news4, news5); # list of all articles
#list of all words
allWords = union(news1, news2);
allWords = union(allArticles, news3);
allWords = union(allArticles, news4);
allWords = union(allArticles, news5);
# make index list with 727 entries and 1 column set to NULL
indexList = list(rep(list(c()), times=length(allWords)));
# make counter list where all data is set to default zero
countList =list(rep(list(c(0)), times=length(allWords)));
counter = 0;
# look through all words and set document ID
for (i in 1:length(allWords)) # loop through all words
{
for (j in 1:length(newsArticles)) # loop through all articles
{
if (is.element(allWords[[i]], newsArticles[[j]])) # check if word matches article
{
indexList[[1]][[i]] = union(indexList[[1]][[i]],j); # set document ID to list
counter = countList[[1]][[i]];
counter = counter + 1;
countList[[1]][[i]] = counter;
}
}
}
# set the second element to all the words
indexList[[2]] =  allWords;
indexList[[3]] = countList[[1]];
# NOTE: list too long to be shown in Environment list
indexList[[1]] # see all document IDs
indexList[[2]] # see all words
# find the dictionary entry that contains word "of"
position = match("of", indexList[[2]]) # position of word in total words
# retrive the document IDs in that position: document 1+2+3+4+5
indexList[[c(1,position)]]
# simple test ----------------
# searches for word number 371: "respectively
indexList[[c(2,371)]]
# how many times does the word "respectively" occur? 1 time
length(indexList[[1]])
# what document(s) includes the word "respectively"? document 2
indexList[[c(1,371)]]
# simple test ---------------- end
# sort the list by number of occurenses -------------
# sort all (article 1 in alphabetical order)
#indexList[order(indexList[[3]],indexList[[1]],decreasing=FALSE),]
#newsArticles[[1]][order(newsArticles[[1]][,1],newsArticles[[1]][,2],decreasing=FALSE),]
# order by first column (text)
#df[order(df[,1],df[,2],decreasing=FALSE),]
#df<-matrix(data=c(3,7,5,0,1,0,0,0,0,8,0,9), ncol=2)
#newsArticles[[1]][,1]
# sort the list by number of occurenses ------------- end
# query optimization (AND) ----------
# we want to look for the words "of" AND "Friday"
# let's look throught the lists with fewer elements first
# query optimization (AND) ---------- end
rm(list=ls(all=TRUE))
news1 = scan("news1.txt", what="character")
news2 = scan("news2.txt", what="character")
news3 = scan("news3.txt", what="character")
news4 = scan("news4.txt", what="character")
news5 = scan("news5.txt", what="character")
newsArticles = list(news1, news2, news3, news4, news5); # list of all articles
#list of all words
allWords = union(news1, news2);
allWords = union(allArticles, news3);
allWords = union(allArticles, news4);
allWords = union(allArticles, news5);
# make index list with 727 entries and 1 column set to NULL
indexList = list(rep(list(c()), times=length(allWords)));
# make counter list where all data is set to default zero
countList =list(rep(list(c(0)), times=length(allWords)));
counter = 0;
# look through all words and set document ID
for (i in 1:length(allWords)) # loop through all words
{
for (j in 1:length(newsArticles)) # loop through all articles
{
if (is.element(allWords[[i]], newsArticles[[j]])) # check if word matches article
{
indexList[[1]][[i]] = union(indexList[[1]][[i]],j); # set document ID to list
counter = countList[[1]][[i]];
counter = counter + 1;
countList[[1]][[i]] = counter;
}
}
}
# set the second element to all the words
indexList[[2]] =  allWords;
indexList[[3]] = countList[[1]];
# NOTE: list too long to be shown in Environment list
indexList[[1]] # see all document IDs
indexList[[2]] # see all words
# find the dictionary entry that contains word "of"
position = match("of", indexList[[2]]) # position of word in total words
# retrive the document IDs in that position: document 1+2+3+4+5
indexList[[c(1,position)]]
# simple test ----------------
# searches for word number 371: "respectively
indexList[[c(2,371)]]
# how many times does the word "respectively" occur? 1 time
length(indexList[[1]])
# what document(s) includes the word "respectively"? document 2
indexList[[c(1,371)]]
# simple test ---------------- end
# sort the list by number of occurenses -------------
# sort all (article 1 in alphabetical order)
#indexList[order(indexList[[3]],indexList[[1]],decreasing=FALSE),]
#newsArticles[[1]][order(newsArticles[[1]][,1],newsArticles[[1]][,2],decreasing=FALSE),]
# order by first column (text)
#df[order(df[,1],df[,2],decreasing=FALSE),]
#df<-matrix(data=c(3,7,5,0,1,0,0,0,0,8,0,9), ncol=2)
#newsArticles[[1]][,1]
# sort the list by number of occurenses ------------- end
# query optimization (AND) ----------
# we want to look for the words "of" AND "Friday"
# let's look throught the lists with fewer elements first
# query optimization (AND) ---------- end
names(indexList)
names(indexList) = "Hej";
names(indexList[[1]]) = "ID";
names(indexList[1]) = "ID";
names(indexList)[1] = "ID";
names(indexList)[1] = "asdasd";
names(indexList)[1] = "ID1";
names(indexList)[2] = "Word2";
names(indexList)[3] = "Freq3";
names(indexList)
names(indexList[1])
indexList
indexList[1]
indexList[3]
rm(list=ls(all=TRUE))
news1 = scan("news1.txt", what="character")
news2 = scan("news2.txt", what="character")
news3 = scan("news3.txt", what="character")
news4 = scan("news4.txt", what="character")
news5 = scan("news5.txt", what="character")
newsArticles = list(news1, news2, news3, news4, news5); # list of all articles
#list of all words
allWords = union(news1, news2);
allWords = union(allArticles, news3);
allWords = union(allArticles, news4);
allWords = union(allArticles, news5);
# make index list with 727 entries and 1 column set to NULL
indexList = list(rep(list(c()), times=length(allWords)));
# make counter list where all data is set to default zero
countList =list(rep(list(c(0)), times=length(allWords)));
counter = 0;
# look through all words and set document ID
for (i in 1:length(allWords)) # loop through all words
{
for (j in 1:length(newsArticles)) # loop through all articles
{
if (is.element(allWords[[i]], newsArticles[[j]])) # check if word matches article
{
indexList[[1]][[i]] = union(indexList[[1]][[i]],j); # set document ID to list
counter = countList[[1]][[i]];
counter = counter + 1;
countList[[1]][[i]] = counter;
}
}
}
# set the second element to all the words
indexList[[2]] =  allWords;
indexList[[3]] = countList[[1]];
# NOTE: list too long to be shown in Environment list
indexList[[1]] # see all document IDs
indexList[[2]] # see all words
# find the dictionary entry that contains word "of"
position = match("of", indexList[[2]]) # position of word in total words
# retrive the document IDs in that position: document 1+2+3+4+5
indexList[[c(1,position)]]
# simple test ----------------
# searches for word number 371: "respectively
indexList[[c(2,371)]]
# how many times does the word "respectively" occur? 1 time
length(indexList[[1]])
# what document(s) includes the word "respectively"? document 2
indexList[[c(1,371)]]
# simple test ---------------- end
# sort the list by number of occurenses -------------
# sort all (article 1 in alphabetical order)
#indexList[order(indexList[[3]],indexList[[1]],decreasing=FALSE),]
names(indexList)[1] = "ID";
names(indexList)[2] = "Word";
names(indexList)[3] = "Freq";
#newsArticles[[1]][order(newsArticles[[1]][,1],newsArticles[[1]][,2],decreasing=FALSE),]
# order by first column (text)
#df[order(df[,1],df[,2],decreasing=FALSE),]
#df<-matrix(data=c(3,7,5,0,1,0,0,0,0,8,0,9), ncol=2)
#newsArticles[[1]][,1]
# sort the list by number of occurenses ------------- end
# query optimization (AND) ----------
# we want to look for the words "of" AND "Friday"
# let's look throught the lists with fewer elements first
# query optimization (AND) ---------- end
names(indexList)[3]
sort(indexList$ID, decreasing=T)
sort(indexList$ID)
t2 <-lapply(t1, function(x) cbind(x,RowMeans=rowMeans(x[,c("ColumnX","ColumnY","ColumnZ")])))
str(indexList)
ndx = order(indexList, decreasing=T)
ndx = order(indexList[[1]], decreasing=T)
indexList
ndx = order(indexList[1], decreasing=T)
indexList_sorted = indexList[ndx,]
indexList_sorted = indexList[ndx,,]
indexList[ndx,]
indexList_sorted = indexList[]
indexList[1]
ndx
ndx = order(indexList[[1]], decreasing=T)
ndx = order(indexList$ID, decreasing=T)
indexList$ID
indexList$Word
index_sort = indexList(order(indexList[1]))
index_sort = indexList(order(indexList[[1]]))
index_sort = indexList(order(indexList[[1]]))
indexList
index_sort = indexList(order(indexList$Freq))
indexList(order(indexList$Freq))
index_sort = indexList[order(indexList[1]])
index_sort = indexList[order(indexList[1]])
index_sort = indexList[order(indexList[1])]
index_sort = indexList[order(indexList$Freq)]
index_sort = indexList[order(indexList[3], indexList[1], indexList[2])]
index_sorted = indexList[order(indexList[3], indexList[1], indexList[2])]
index_sorted
# remove all variables
rm(list=ls(all=TRUE))
# load in the files
news1 = scan("news1.txt", what="character")
news2 = scan("news2.txt", what="character")
news3 = scan("news3.txt", what="character")
news4 = scan("news4.txt", what="character")
news5 = scan("news5.txt", what="character")
# put all articles in a list
newsArticles = list(news1, news2, news3, news4, news5); # list of all articles
#list of all words
allWords = union(news1, news2);
allWords = union(allArticles, news3);
allWords = union(allArticles, news4);
allWords = union(allArticles, news5);
# make index list with 727 entries and 1 column set to NULL
indexList = list(rep(list(c()), times=length(allWords)));
# make counter list where all data is set to default zero
countList =list(rep(list(c(0)), times=length(allWords)));
counter = 0;
# look through all words and set document ID
for (i in 1:length(allWords)) # loop through all words
{
for (j in 1:length(newsArticles)) # loop through all articles
{
if (is.element(allWords[[i]], newsArticles[[j]])) # check if word matches article
{
indexList[[1]][[i]] = union(indexList[[1]][[i]],j); # set document ID to list
counter = countList[[1]][[i]];
counter = counter + 1;
countList[[1]][[i]] = counter;
}
}
}
# set the second element to all the words
indexList[[2]] =  allWords;
indexList[[3]] = countList[[1]];
# NOTE: list is too long to be shown in Environment list
indexList[[1]] # see all document IDs
indexList[[2]] # see all words
# simple tests ----------------
# find the dictionary entry that contains word "of"
position = match("of", indexList[[2]]) # position of word in total words
# retrive the document IDs in that position: document 1+2+3+4+5
indexList[[c(1,position)]]
# searches for word number 371: "respectively
indexList[[c(2,371)]]
# how many times does the word "respectively" occur? 1 time
length(indexList[[1]])
# what document(s) includes the word "respectively"? document 2
indexList[[c(1,371)]]
# simple test ---------------- end
# sort the list by number of occurences -------------
# sort all (article 1 in alphabetical order)
# rename the columns
names(indexList)[1] = "ID";
names(indexList)[2] = "Word";
names(indexList)[3] = "Freq";
# sort by freq, then id, then word
# this does not work?
index_sorted = indexList[order(indexList[3], indexList[1], indexList[2])]
# sort the list by number of occurences ------------- end
# query optimization (AND) ----------
# we want to look for the words "of" AND "Friday"
# let's look throught the lists with fewer elements first
# query optimization (AND) ---------- end
# remove all variables
rm(list=ls(all=TRUE))
# load in the files
news1 = scan("news1.txt", what="character")
news2 = scan("news2.txt", what="character")
news3 = scan("news3.txt", what="character")
news4 = scan("news4.txt", what="character")
news5 = scan("news5.txt", what="character")
# put all articles in a list
newsArticles = list(news1, news2, news3, news4, news5); # list of all articles
#list of all words
allWords = union(news1, news2);
allWords = union(allArticles, news3);
allWords = union(allArticles, news4);
allWords = union(allArticles, news5);
# make index list with 727 entries and 1 column set to NULL
indexList = list(rep(list(c()), times=length(allWords)));
# make counter list where all data is set to default zero
countList =list(rep(list(c(0)), times=length(allWords)));
counter = 0;
# look through all words and set document ID
for (i in 1:length(allWords)) # loop through all words
{
for (j in 1:length(newsArticles)) # loop through all articles
{
if (is.element(allWords[[i]], newsArticles[[j]])) # check if word matches article
{
indexList[[1]][[i]] = union(indexList[[1]][[i]],j); # set document ID to list
counter = countList[[1]][[i]];
counter = counter + 1;
countList[[1]][[i]] = counter;
}
}
}
# set the second element to all the words
indexList[[2]] =  allWords;
indexList[[3]] = countList[[1]];
# NOTE: list is too long to be shown in Environment list
indexList[[1]] # see all document IDs
indexList[[2]] # see all words
# simple tests ----------------
# find the dictionary entry that contains word "of"
position = match("of", indexList[[2]]) # position of word in total words
# retrive the document IDs in that position: document 1+2+3+4+5
indexList[[c(1,position)]]
# searches for word number 371: "respectively
indexList[[c(2,371)]]
# how many times does the word "respectively" occur? 1 time
length(indexList[[1]])
# what document(s) includes the word "respectively"? document 2
indexList[[c(1,371)]]
# simple test ---------------- end
# sort the list by number of occurences -------------
# sort all (article 1 in alphabetical order)
# rename the columns
names(indexList)[1] = "ID";
names(indexList)[2] = "Word";
names(indexList)[3] = "Freq";
# sort by freq, then id, then word
# this does not work?
index_sorted = indexList[order(indexList[3], indexList[1], indexList[2])]
# sort the list by number of occurences ------------- end
# query optimization (AND) ----------
# we want to look for the words "of" AND "Friday"
# let's look throught the lists with fewer elements first
# query optimization (AND) ---------- end
# remove all variables
rm(list=ls(all=TRUE))
# load in the files
news1 = scan("news1.txt", what="character")
news2 = scan("news2.txt", what="character")
news3 = scan("news3.txt", what="character")
news4 = scan("news4.txt", what="character")
news5 = scan("news5.txt", what="character")
# put all articles in a list
newsArticles = list(news1, news2, news3, news4, news5); # list of all articles
#list of all words
allWords = union(news1, news2);
allWords = union(allArticles, news3);
allWords = union(allArticles, news4);
allWords = union(allArticles, news5);
# make index list with 727 entries and 1 column set to NULL
indexList = list(rep(list(c()), times=length(allWords)));
# make counter list where all data is set to default zero
countList =list(rep(list(c(0)), times=length(allWords)));
counter = 0;
# look through all words and set document ID
for (i in 1:length(allWords)) # loop through all words
{
for (j in 1:length(newsArticles)) # loop through all articles
{
if (is.element(allWords[[i]], newsArticles[[j]])) # check if word matches article
{
indexList[[1]][[i]] = union(indexList[[1]][[i]],j); # set document ID to list
counter = countList[[1]][[i]];
counter = counter + 1;
countList[[1]][[i]] = counter;
}
}
}
# remove all variables
rm(list=ls(all=TRUE))
# load in the files
news1 = scan("news1.txt", what="character")
news2 = scan("news2.txt", what="character")
news3 = scan("news3.txt", what="character")
news4 = scan("news4.txt", what="character")
news5 = scan("news5.txt", what="character")
# put all articles in a list
newsArticles = list(news1, news2, news3, news4, news5); # list of all articles
#list of all words
allWords = union(news1, news2);
allWords = union(allWords, news3);
allWords = union(allWords, news4);
allWords = union(allWords, news5);
# make index list with 727 entries and 1 column set to NULL
indexList = list(rep(list(c()), times=length(allWords)));
# make counter list where all data is set to default zero
countList =list(rep(list(c(0)), times=length(allWords)));
counter = 0;
# look through all words and set document ID
for (i in 1:length(allWords)) # loop through all words
{
for (j in 1:length(newsArticles)) # loop through all articles
{
if (is.element(allWords[[i]], newsArticles[[j]])) # check if word matches article
{
indexList[[1]][[i]] = union(indexList[[1]][[i]],j); # set document ID to list
counter = countList[[1]][[i]];
counter = counter + 1;
countList[[1]][[i]] = counter;
}
}
}
# set the second element to all the words
indexList[[2]] =  allWords;
indexList[[3]] = countList[[1]];
# NOTE: list is too long to be shown in Environment list
indexList[[1]] # see all document IDs
indexList[[2]] # see all words
# simple tests ----------------
# find the dictionary entry that contains word "of"
position = match("of", indexList[[2]]) # position of word in total words
# retrive the document IDs in that position: document 1+2+3+4+5
indexList[[c(1,position)]]
# searches for word number 371: "respectively
indexList[[c(2,371)]]
# how many times does the word "respectively" occur? 1 time
length(indexList[[1]])
# what document(s) includes the word "respectively"? document 2
indexList[[c(1,371)]]
# simple test ---------------- end
# sort the list by number of occurences -------------
# sort all (article 1 in alphabetical order)
# rename the columns
names(indexList)[1] = "ID";
names(indexList)[2] = "Word";
names(indexList)[3] = "Freq";
# sort by freq, then id, then word
# this does not work?
index_sorted = indexList[order(indexList[3], indexList[1], indexList[2])]
# sort the list by number of occurences ------------- end
# query optimization (AND) ----------
# we want to look for the words "of" AND "Friday"
# let's look throught the lists with fewer elements first
# query optimization (AND) ---------- end
length(iindex_sorted)
length(index_sorted)
length(indexList)
